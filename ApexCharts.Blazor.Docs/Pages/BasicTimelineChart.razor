@page "/timeline-charts/basic"

@inject IJSRuntime JSRuntime

<h1>Basic TimeLine Chart</h1>

@*<Chart ChartOptions="@chart" Series="@series" DatalabelsOptions="@datalabels" StrokeOptions="@stroke" TitleOptions="@title"></Chart>
*@<Chart Configuration="@config" Series="@series"></Chart>

<pre><code class="language-html">&lt;Chart Configuration="@@config" Series="@@series"&gt;&lt;/Chart&gt;</code></pre>
<pre><code class="language-csharp">@@code {

}</code></pre>

@code {
	ChartConfiguration config = new ChartConfiguration()
		.SetChart(
			new ChartOptions()
			.SetType(ChartType.RangeBar)
			.SetHeight("350px")
			.SetZoom(
				new ZoomOptions()
				.SetIsEnabled(false)
			)
		)
		.SetPlot(
			new PlotOptions()
			.SetBar(
				new BarPlotOptions()
				.SetHorizontal(true)
			)
		)
		.SetXAxis(
			new XAxisOptions()
			.SetType(XAxisType.DateTime)
		);

	List<BaseSeries> series = new List<BaseSeries>
	{
		new Series
		{
			Data = new List<DataItem>
			{
				new TimelineDataItem("Code", new DateTime?[] { DateTime.Parse("2019-03-02"), DateTime.Parse("2019-03-04") }),
				new TimelineDataItem("Test", new DateTime?[] { DateTime.Parse("2019-03-04"), DateTime.Parse("2019-03-08") }),
				new TimelineDataItem("Validation", new DateTime?[] { DateTime.Parse("2019-03-08"), DateTime.Parse("2019-03-12") }),
				new TimelineDataItem("Deployment", new DateTime?[] { DateTime.Parse("2019-03-12"), DateTime.Parse("2019-03-18") }),
			}
		}
	};

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			((JSInProcessRuntime)JSRuntime).InvokeVoid("Prism.highlightAll");
		}
	}

}
