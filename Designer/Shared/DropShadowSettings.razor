<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Enabled</label>
    <div class="col-sm-8">
        <div class="form-group form-check">
            <input type="checkbox" class="form-check-input" @bind="enabled">
        </div>
    </div>
</div>  
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Enabled On Series</label>
    <div class="col-sm-8">
        <input type="text" class="form-control form-control-sm" @bind="enabledOnSeries">
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Top</label>
    <div class="col-sm-8">
        <input type="number" class="form-control form-control-sm" @bind="top">
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Left</label>
    <div class="col-sm-8">
        <input type="number" class="form-control form-control-sm" @bind="left">
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Blur</label>
    <div class="col-sm-8">
        <input type="number" class="form-control form-control-sm" @bind="blur">
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Color</label>
    <div class="col-sm-8">
        <input type="text" class="form-control form-control-sm" @bind="color">
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 col-form-label col-form-label-sm">Opacity</label>
    <div class="col-sm-8">
        <input type="number" class="form-control form-control-sm" @bind="opacity">
    </div>
</div>

@code {
    [Parameter] public DropShadow DropShadow { get; set; }
    [Parameter] public EventCallback<DropShadow> DropShadowChanged { get; set; }

    private bool enabled
    {
        get
        {
            if (DropShadow != null)
                return DropShadow.Enabled;
            else
                return false;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Enabled = value;
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private string enabledOnSeries
    {
        get
        {
            if (DropShadow != null && DropShadow.EnabledOnSeries != null)
            {
                return string.Join(",", DropShadow.EnabledOnSeries);
            }
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.EnabledOnSeries = Array.ConvertAll(value.Split(','), Convert.ToInt32).ToList();
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private decimal? top
    {
        get
        {
            if (DropShadow != null)
                return DropShadow.Top;
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Top = value;
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private decimal? left
    {
        get
        {
            if (DropShadow != null)
                return DropShadow.Left;
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Left = value;
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private decimal? blur
    {
        get
        {
            if (DropShadow != null)
                return DropShadow.Blur;
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Blur = value;
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private string color
    {
        get
        {
            if (DropShadow != null && DropShadow.Color != null)
            {
                return string.Join(",", DropShadow.Color);
            }
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Color = Array.ConvertAll(value.Split(','), Convert.ToString).ToList();
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

    private decimal? opacity
    {
        get
        {
            if (DropShadow != null)
                return DropShadow.Opacity;
            else
                return null;
        }
        set
        {
            if (DropShadow == null)
                DropShadow = new DropShadow();
                
            DropShadow.Opacity = value;
            DropShadowChanged.InvokeAsync(DropShadow);
        }
    }

}
